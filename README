NAME: Ty Koslowski
EMAIL: tykoslowski@g.ucla.edu
DATE: 3/2/2021

This is my implementation of the theater organizer for the Movie Theater 
Seating Challenge 2020.

I first made sure I had "make" and "zip" installed in my Linux distribution. I 
am using Windows, so I'm running on WSL with Ubuntu.

Linux commands "make" and "zip" must be installed. To create a command-line 
executable for this solution, run "make" inside the directory in which it was 
unzipped. This should create a file called "theater_organizer" which can be 
executed using:

./theater_organizer [FILENAME]

where "FILENAME" is the name of the input file to be used to determine 
reservations.

To run the tests for the solution, use "make tests". This will create a 
distributable .zip file, unzip its contents to a temporary directory, and run 
tests on its contents. Then, it will delete the temporary directory as well as 
the .zip file.

For this solution, I assumed that the output file was to be a .txt file. I 
wrote the solution so that the output is put into a newly-created file called 
"result.txt". If the file already exists, then it is overwritten. 

I also assumed the theater starts empty. If the theater were to not start 
empty, we would need a way of telling the solution which seats are already 
taken.

The next assumption I made was that of order of importance. I decided to opt 
for a "first come, first serve" approach, where reservations are fulfilled in 
the order in which they are provided. While examining all reservations and 
maximizing the used seats would create a larger number of satisfied customers, 
it would also create a lot of angry customers that filled their reservation 
early and still did not get a seat.

I then assumed that people wanted to be in groups. The buffer should only 
apply between groups and groups will not want to be split up. Again, with the 
splitting of groups, we could approach a theater at max capacity, but we might 
get unhappy customers when four friends are sitting at the four corners of the 
theater.

Another assumption I made was that earlier reservations would prefer the back 
of the theater (sitting in the front is horrible!) and that the theater should 
be filled from the back forward, checking edges first (to minimize buffer 
space and therefore maximize occupancy and reservation-fulfillment 
capabilities).

A more specific assumption came to me while programming my "find()" function. 
We can check each edge of every other row rather than every row because if a 
row is occupied at the edge, then the space in the rows adjacent are going to 
be buffer seats.

I finally assumed that with no edges open, we should move to a greedy 
algorithm, as only the middle portions of the theater are open, and we would 
find no benefit to sticking to a certain area any longer.

The tests I ran on my solution were as follows:
  1 - General simple case test, are reservations being fulfilled from the back 
      to the front, are edges being filled first
  2 - What happens when all edges are filled? We should move to middle 
      portions and use greedy algorithm, checks that buffers overlap and that 
      buffers are being maintained
  3 - Same as test 2, but has two invalid reservations at the end, so these 
      two reservations should go unfulfilled
  4 - Tests for squeeze, makes sure that the solution will overlap buffers on 
      both left and right
  5 - Tests for squeeze, makes sure that the solution will overlap buffers on 
      both top and bottom
  6 - Fills the theater fuller, tests that larger parties will end up being 
      put at rows closer to the front, but smaller parties can still take 
      advantage of open spaces further back
  7 - Fills the theater to near-full capacity, keeps handling reservations, 
      shows that reservations that don't fit will go unfulfilled, while 
      reservations that can still fit will be fulfilled, and once the theater 
      is at full-capacity, parties of 1 even will not have their reservation 
      fulfilled

These tests can be run using "make tests".
